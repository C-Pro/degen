// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson72cd9c75DecodeDegenPkgConnectorsBinance(in *jlexer.Lexer, out *orderUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "o":
			easyjson72cd9c75Decode(in, &out.Order)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance(out *jwriter.Writer, in orderUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		easyjson72cd9c75Encode(out, in.Order)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v orderUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v orderUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *orderUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *orderUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance(l, v)
}
func easyjson72cd9c75Decode(in *jlexer.Lexer, out *struct {
	Symbol          string `json:"s"`
	ClientOrderID   string `json:"c"`
	ExchangeOrderID int64  `json:"i"`
	Side            string `json:"S"`
	Type            string `json:"o"`
	Status          string `json:"X"`
	FilledSize      string `json:"z"`
	AveragePrice    string `json:"ap"`
	UpdatedAtMS     int64  `json:"T"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.ClientOrderID = string(in.String())
		case "i":
			out.ExchangeOrderID = int64(in.Int64())
		case "S":
			out.Side = string(in.String())
		case "o":
			out.Type = string(in.String())
		case "X":
			out.Status = string(in.String())
		case "z":
			out.FilledSize = string(in.String())
		case "ap":
			out.AveragePrice = string(in.String())
		case "T":
			out.UpdatedAtMS = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75Encode(out *jwriter.Writer, in struct {
	Symbol          string `json:"s"`
	ClientOrderID   string `json:"c"`
	ExchangeOrderID int64  `json:"i"`
	Side            string `json:"S"`
	Type            string `json:"o"`
	Status          string `json:"X"`
	FilledSize      string `json:"z"`
	AveragePrice    string `json:"ap"`
	UpdatedAtMS     int64  `json:"T"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExchangeOrderID))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.FilledSize))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdatedAtMS))
	}
	out.RawByte('}')
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(in *jlexer.Lexer, out *dummyEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(out *jwriter.Writer, in dummyEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dummyEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dummyEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dummyEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dummyEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(l, v)
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(in *jlexer.Lexer, out *bookTicker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "s":
			out.Symbol = string(in.String())
		case "b":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BidPrice).UnmarshalJSON(data))
			}
		case "B":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BidSize).UnmarshalJSON(data))
			}
		case "a":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AskPrice).UnmarshalJSON(data))
			}
		case "A":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AskSize).UnmarshalJSON(data))
			}
		case "T":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(out *jwriter.Writer, in bookTicker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Raw((in.BidPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Raw((in.BidSize).MarshalJSON())
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Raw((in.AskPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.Raw((in.AskSize).MarshalJSON())
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v bookTicker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v bookTicker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *bookTicker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *bookTicker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(l, v)
}
