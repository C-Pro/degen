// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson72cd9c75DecodeDegenPkgConnectorsBinance(in *jlexer.Lexer, out *subscribeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(string)
				}
				*out.Result = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance(out *jwriter.Writer, in subscribeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Result))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subscribeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subscribeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subscribeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subscribeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance(l, v)
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(in *jlexer.Lexer, out *orderUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "o":
			easyjson72cd9c75Decode(in, &out.Order)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(out *jwriter.Writer, in orderUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		easyjson72cd9c75Encode(out, in.Order)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v orderUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v orderUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *orderUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *orderUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance1(l, v)
}
func easyjson72cd9c75Decode(in *jlexer.Lexer, out *struct {
	Symbol          string `json:"s"`
	ClientOrderID   string `json:"c"`
	ExchangeOrderID int64  `json:"i"`
	Side            string `json:"S"`
	Type            string `json:"o"`
	Status          string `json:"X"`
	FilledSize      string `json:"z"`
	AveragePrice    string `json:"ap"`
	UpdatedAtMS     int64  `json:"T"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.ClientOrderID = string(in.String())
		case "i":
			out.ExchangeOrderID = int64(in.Int64())
		case "S":
			out.Side = string(in.String())
		case "o":
			out.Type = string(in.String())
		case "X":
			out.Status = string(in.String())
		case "z":
			out.FilledSize = string(in.String())
		case "ap":
			out.AveragePrice = string(in.String())
		case "T":
			out.UpdatedAtMS = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75Encode(out *jwriter.Writer, in struct {
	Symbol          string `json:"s"`
	ClientOrderID   string `json:"c"`
	ExchangeOrderID int64  `json:"i"`
	Side            string `json:"S"`
	Type            string `json:"o"`
	Status          string `json:"X"`
	FilledSize      string `json:"z"`
	AveragePrice    string `json:"ap"`
	UpdatedAtMS     int64  `json:"T"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExchangeOrderID))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.FilledSize))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdatedAtMS))
	}
	out.RawByte('}')
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(in *jlexer.Lexer, out *dummyEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(out *jwriter.Writer, in dummyEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dummyEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dummyEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dummyEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dummyEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance2(l, v)
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance3(in *jlexer.Lexer, out *bookTicker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "s":
			out.Symbol = string(in.String())
		case "b":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BidPrice).UnmarshalJSON(data))
			}
		case "B":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BidSize).UnmarshalJSON(data))
			}
		case "a":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AskPrice).UnmarshalJSON(data))
			}
		case "A":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AskSize).UnmarshalJSON(data))
			}
		case "T":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance3(out *jwriter.Writer, in bookTicker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Raw((in.BidPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Raw((in.BidSize).MarshalJSON())
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Raw((in.AskPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.Raw((in.AskSize).MarshalJSON())
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v bookTicker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v bookTicker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *bookTicker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *bookTicker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance3(l, v)
}
func easyjson72cd9c75DecodeDegenPkgConnectorsBinance4(in *jlexer.Lexer, out *accountUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Timestamp = int64(in.Int64())
		case "a":
			easyjson72cd9c75Decode1(in, &out.Update)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75EncodeDegenPkgConnectorsBinance4(out *jwriter.Writer, in accountUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		easyjson72cd9c75Encode1(out, in.Update)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v accountUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v accountUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72cd9c75EncodeDegenPkgConnectorsBinance4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *accountUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *accountUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72cd9c75DecodeDegenPkgConnectorsBinance4(l, v)
}
func easyjson72cd9c75Decode1(in *jlexer.Lexer, out *struct {
	Reason   string `json:"m"`
	Balances []struct {
		Asset   string          `json:"a"`
		Balance decimal.Decimal `json:"wb"`
	} `json:"B"`
	Positions []struct {
		Symbol string          `json:"s"`
		Amount decimal.Decimal `json:"pa"`
	} `json:"P"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "m":
			out.Reason = string(in.String())
		case "B":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]struct {
							Asset   string          `json:"a"`
							Balance decimal.Decimal `json:"wb"`
						}, 0, 2)
					} else {
						out.Balances = []struct {
							Asset   string          `json:"a"`
							Balance decimal.Decimal `json:"wb"`
						}{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Asset   string          `json:"a"`
						Balance decimal.Decimal `json:"wb"`
					}
					easyjson72cd9c75Decode2(in, &v1)
					out.Balances = append(out.Balances, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "P":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]struct {
							Symbol string          `json:"s"`
							Amount decimal.Decimal `json:"pa"`
						}, 0, 2)
					} else {
						out.Positions = []struct {
							Symbol string          `json:"s"`
							Amount decimal.Decimal `json:"pa"`
						}{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 struct {
						Symbol string          `json:"s"`
						Amount decimal.Decimal `json:"pa"`
					}
					easyjson72cd9c75Decode3(in, &v2)
					out.Positions = append(out.Positions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75Encode1(out *jwriter.Writer, in struct {
	Reason   string `json:"m"`
	Balances []struct {
		Asset   string          `json:"a"`
		Balance decimal.Decimal `json:"wb"`
	} `json:"B"`
	Positions []struct {
		Symbol string          `json:"s"`
		Amount decimal.Decimal `json:"pa"`
	} `json:"P"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.Balances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Balances {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson72cd9c75Encode2(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Positions {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson72cd9c75Encode3(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson72cd9c75Decode3(in *jlexer.Lexer, out *struct {
	Symbol string          `json:"s"`
	Amount decimal.Decimal `json:"pa"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "pa":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75Encode3(out *jwriter.Writer, in struct {
	Symbol string          `json:"s"`
	Amount decimal.Decimal `json:"pa"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"pa\":"
		out.RawString(prefix)
		out.Raw((in.Amount).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson72cd9c75Decode2(in *jlexer.Lexer, out *struct {
	Asset   string          `json:"a"`
	Balance decimal.Decimal `json:"wb"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "wb":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Balance).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72cd9c75Encode2(out *jwriter.Writer, in struct {
	Asset   string          `json:"a"`
	Balance decimal.Decimal `json:"wb"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"wb\":"
		out.RawString(prefix)
		out.Raw((in.Balance).MarshalJSON())
	}
	out.RawByte('}')
}
