// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson120d1ca2DecodeDegenPkgConnectorsBinance(in *jlexer.Lexer, out *placeOrderResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newClientOrderId":
			out.ClientOrderID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "origQty":
			out.Quantity = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "reduceOnly":
			out.ReduceOnly = bool(in.Bool())
		case "stopPrice":
			out.StopPrice = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "orderId":
			out.ExchangeOrderID = int64(in.Int64())
		case "executedQty":
			out.FilledQty = string(in.String())
		case "avgPrice":
			out.FilledPrice = string(in.String())
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "updateTime":
			out.UpdateTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeDegenPkgConnectorsBinance(out *jwriter.Writer, in placeOrderResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newClientOrderId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"origQty\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"stopPrice\":"
		out.RawString(prefix)
		out.String(string(in.StopPrice))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExchangeOrderID))
	}
	{
		const prefix string = ",\"executedQty\":"
		out.RawString(prefix)
		out.String(string(in.FilledQty))
	}
	{
		const prefix string = ",\"avgPrice\":"
		out.RawString(prefix)
		out.String(string(in.FilledPrice))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"updateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v placeOrderResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeDegenPkgConnectorsBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v placeOrderResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeDegenPkgConnectorsBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *placeOrderResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeDegenPkgConnectorsBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *placeOrderResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeDegenPkgConnectorsBinance(l, v)
}
